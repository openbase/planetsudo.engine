/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/*
 * ConfigurationPanel.java
 *
 * Created on Jun 17, 2010, 1:02:56 AM
 */
package org.openbase.planetsudo.view.configuration

import org.apache.commons.io.FileUtils
import org.openbase.jul.exception.CouldNotPerformException
import org.openbase.jul.exception.printer.ExceptionPrinter
import org.openbase.jul.visual.swing.image.ImageLoader
import org.openbase.planetsudo.game.GameManager
import org.openbase.planetsudo.game.GameManager.Companion.gameManager
import org.openbase.planetsudo.game.Team.Companion.loadAll
import org.openbase.planetsudo.game.Team.Companion.loadDefaultTeam
import org.openbase.planetsudo.game.Team.Companion.saveDefaultTeam
import org.openbase.planetsudo.game.TeamData
import org.openbase.planetsudo.level.LevelLoader.Companion.getInstance
import org.openbase.planetsudo.net.PlanetSudoClient
import org.openbase.planetsudo.net.PlanetSudoClient.Companion.instance
import org.openbase.planetsudo.view.MainGUI
import org.openbase.planetsudo.view.level.LevelDisplayPanel
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.awt.Color
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream
import java.util.*
import javax.swing.*
import javax.swing.border.BevelBorder
import javax.swing.border.SoftBevelBorder

/**
 * @author [Divine Threepwood](mailto:divine@openbase.org)
 */
class ConfigurationPanel : JPanel() {
    private val logger: Logger = LoggerFactory.getLogger(javaClass)
    private val stateProperties: Properties

    private fun initDynamicComponents() {
        // load level
        LevelChooserComboBox!!.isEnabled = false
        LevelChooserComboBox!!.removeAllItems()
        for (levelName in getInstance()!!.levelNameSet) {
            LevelChooserComboBox!!.addItem(levelName)
        }
        if (LevelChooserComboBox!!.itemCount >= 0) {
            LevelChooserComboBox!!.selectedIndex = stateProperties.getProperty(PROPERTY_SELECTED_LEVEL, "0").toInt()
        }
        LevelChooserComboBox!!.isEnabled = true

        // load teams
        updateTeamList()

        // setup default team
        setdefaultTeamButton!!.foreground = Color.BLACK
        setdefaultTeamButton!!.isEnabled = true
        defaultTeamComboBox!!.isEnabled = true
        syncButton!!.isEnabled = false
        try {
            val loadDefaultTeam = loadDefaultTeam()
            setDefaultTeam(loadDefaultTeam)
        } catch (ex: CouldNotPerformException) {
            ExceptionPrinter.printHistory(CouldNotPerformException("Could not load default team!", ex), logger)
        }
    }

    fun updateTeamList() {
        try {
            teamAComboBox!!.isEnabled = false
            teamBComboBox!!.isEnabled = false
            teamAComboBox!!.removeAllItems()
            teamBComboBox!!.removeAllItems()

            if (defaultTeamComboBox!!.isEnabled) {
                defaultTeamComboBox!!.removeAllItems()
            }

            val teams = loadAll()
            for (teamData in teams) {
                teamAComboBox!!.addItem(teamData)
                teamBComboBox!!.addItem(teamData)

                if (defaultTeamComboBox!!.isEnabled) {
                    defaultTeamComboBox!!.addItem(teamData)
                }
            }

            // restore selection
            if (teamAComboBox!!.itemCount > 0) {
                teamAComboBox!!.selectedIndex = stateProperties.getProperty(PROPERTY_SELECTED_TEAM_A, "0").toInt()
            }

            if (teamBComboBox!!.itemCount > 0) {
                teamBComboBox!!.selectedIndex = stateProperties.getProperty(PROPERTY_SELECTED_TEAM_B, "0").toInt()
            }

            teamAComboBox!!.isEnabled = true
            teamBComboBox!!.setEnabled(true)
        } catch (ex: CouldNotPerformException) {
            logger.warn("Could not load teams!", ex)
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        jPanel3 = JPanel()
        levelPreviewDisplayPanel = LevelDisplayPanel()
        logoLabel = JLabel()
        jPanel4 = JPanel()
        jPanel1 = JPanel()
        jLabel3 = JLabel()
        jPanel8 = JPanel()
        teamAComboBox = JComboBox<TeamData>()
        jLabel1 = JLabel()
        jPanel9 = JPanel()
        teamBComboBox = JComboBox<TeamData>()
        jLabel2 = JLabel()
        jPanel2 = JPanel()
        LevelChooserComboBox = JComboBox<String>()
        jButton1 = JButton()
        jPanel6 = JPanel()
        jPanel5 = JPanel()
        defaultTeamComboBox = JComboBox()
        setdefaultTeamButton = JButton()
        jPanel7 = JPanel()
        connectionStateLabel = JLabel()
        syncButton = JButton()

        jPanel3!!.border = BorderFactory.createTitledBorder("Vorschau")

        val levelPreviewDisplayPanelLayout = GroupLayout(levelPreviewDisplayPanel)
        levelPreviewDisplayPanel!!.layout = levelPreviewDisplayPanelLayout
        levelPreviewDisplayPanelLayout.setHorizontalGroup(
            levelPreviewDisplayPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 801, Short.MAX_VALUE.toInt())
        )
        levelPreviewDisplayPanelLayout.setVerticalGroup(
            levelPreviewDisplayPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 0, Short.MAX_VALUE.toInt())
        )

        val jPanel3Layout = GroupLayout(jPanel3)
        jPanel3!!.layout = jPanel3Layout
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING,
                    jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(
                            levelPreviewDisplayPanel,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addContainerGap()
                )
        )
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(
                            levelPreviewDisplayPanel,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addContainerGap()
                )
        )

        logoLabel!!.horizontalAlignment = SwingConstants.CENTER
        logoLabel!!.verticalAlignment = SwingConstants.BOTTOM
        logoLabel!!.horizontalTextPosition = SwingConstants.CENTER
        logoLabel!!.verticalTextPosition = SwingConstants.BOTTOM

        jPanel4!!.border = BorderFactory.createTitledBorder("Spiel Einstellungen")

        jPanel1!!.border = BorderFactory.createTitledBorder("Teams")

        jLabel3!!.horizontalAlignment = SwingConstants.CENTER
        jLabel3!!.text = "VS"

        teamAComboBox!!.setModel(DefaultComboBoxModel(emptyArray()))
        teamAComboBox!!.addActionListener(ActionListener { evt -> teamAComboBoxActionPerformed(evt) })

        jLabel1!!.horizontalAlignment = SwingConstants.CENTER
        jLabel1!!.text = "Team A"

        val jPanel8Layout = GroupLayout(jPanel8)
        jPanel8!!.layout = jPanel8Layout
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(teamAComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
        )
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING,
                    jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(
                            LayoutStyle.ComponentPlacement.RELATED,
                            GroupLayout.DEFAULT_SIZE,
                            Int.MAX_VALUE
                        )
                        .addComponent(
                            teamAComboBox,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                )
        )

        teamBComboBox!!.setModel(DefaultComboBoxModel())
        teamBComboBox!!.addActionListener({ evt -> teamBComboBoxActionPerformed(evt) })

        jLabel2!!.horizontalAlignment = SwingConstants.CENTER
        jLabel2!!.text = "Team B"

        val jPanel9Layout = GroupLayout(jPanel9)
        jPanel9!!.layout = jPanel9Layout
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(teamBComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                .addComponent(
                    jLabel2,
                    GroupLayout.Alignment.TRAILING,
                    GroupLayout.DEFAULT_SIZE,
                    GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE.toInt()
                )
        )
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            teamBComboBox,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                )
        )

        val jPanel1Layout = GroupLayout(jPanel1)
        jPanel1!!.layout = jPanel1Layout
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(
                            jPanel8,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            jPanel9,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addContainerGap()
                )
        )
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel1Layout.createSequentialGroup()
                        .addGroup(
                            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addGroup(
                                    jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(
                                            jLabel3,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                        .addComponent(
                                            jPanel8,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            Short.MAX_VALUE.toInt()
                                        )
                                )
                                .addComponent(
                                    jPanel9,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )

        jPanel2!!.border = BorderFactory.createTitledBorder("Level")

        LevelChooserComboBox!!.setMaximumRowCount(20)
        LevelChooserComboBox!!.setModel(DefaultComboBoxModel())
        LevelChooserComboBox!!.addActionListener(ActionListener { evt -> LevelChooserComboBoxActionPerformed(evt) })

        val jPanel2Layout = GroupLayout(jPanel2)
        jPanel2!!.layout = jPanel2Layout
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LevelChooserComboBox, 0, 336, Short.MAX_VALUE.toInt())
                        .addContainerGap()
                )
        )
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel2Layout.createSequentialGroup()
                        .addComponent(
                            LevelChooserComboBox,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )

        jButton1!!.text = "Spiel Starten"
        jButton1!!.addActionListener { evt -> jButton1ActionPerformed(evt) }

        val jPanel4Layout = GroupLayout(jPanel4)
        jPanel4!!.layout = jPanel4Layout
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    jPanel1,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    jPanel2,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    jButton1,
                                    GroupLayout.Alignment.TRAILING,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap()
                )
        )
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, 85, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, 62, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )

        jPanel6!!.border = BorderFactory.createTitledBorder("Netzwerk")

        jPanel5!!.border = BorderFactory.createTitledBorder("Dein Team")

        defaultTeamComboBox!!.setModel(
            DefaultComboBoxModel<TeamData>()
        )
        defaultTeamComboBox!!.addActionListener(ActionListener { evt -> defaultTeamComboBoxActionPerformed(evt) })

        setdefaultTeamButton!!.text = "Setzen"
        setdefaultTeamButton!!.addActionListener { evt -> setdefaultTeamButtonActionPerformed(evt) }

        val jPanel5Layout = GroupLayout(jPanel5)
        jPanel5!!.layout = jPanel5Layout
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING,
                    jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(defaultTeamComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(setdefaultTeamButton)
                        .addContainerGap()
                )
        )
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel5Layout.createSequentialGroup()
                        .addGroup(
                            jPanel5Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(
                                    defaultTeamComboBox,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(setdefaultTeamButton)
                        )
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )

        jPanel7!!.border = BorderFactory.createTitledBorder("Server")

        connectionStateLabel!!.horizontalAlignment = SwingConstants.CENTER
        connectionStateLabel!!.text = "Verbindungsstatus"
        connectionStateLabel!!.border = SoftBevelBorder(BevelBorder.LOWERED)
        connectionStateLabel!!.isOpaque = true

        syncButton!!.text = "Synchronisation"
        syncButton!!.addActionListener { evt -> syncButtonActionPerformed(evt) }

        val jPanel7Layout = GroupLayout(jPanel7)
        jPanel7!!.layout = jPanel7Layout
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    connectionStateLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    syncButton,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap()
                )
        )
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(connectionStateLabel, GroupLayout.PREFERRED_SIZE, 68, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(syncButton)
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )

        val jPanel6Layout = GroupLayout(jPanel6)
        jPanel6!!.layout = jPanel6Layout
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    jPanel5,
                                    GroupLayout.Alignment.TRAILING,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    jPanel7,
                                    GroupLayout.Alignment.TRAILING,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap()
                )
        )
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel6Layout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                        .addComponent(jPanel5, GroupLayout.PREFERRED_SIZE, 64, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                )
        )

        val layout = GroupLayout(this)
        this.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(
                                    jPanel4,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(logoLabel, GroupLayout.PREFERRED_SIZE, 213, GroupLayout.PREFERRED_SIZE)
                                .addComponent(
                                    jPanel6,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(
                            jPanel3,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    jPanel3,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addComponent(
                                            jPanel4,
                                            GroupLayout.PREFERRED_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.PREFERRED_SIZE
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(
                                            jPanel6,
                                            GroupLayout.PREFERRED_SIZE,
                                            GroupLayout.DEFAULT_SIZE,
                                            GroupLayout.PREFERRED_SIZE
                                        )
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 219, Int.MAX_VALUE)
                                        .addComponent(
                                            logoLabel,
                                            GroupLayout.PREFERRED_SIZE,
                                            192,
                                            GroupLayout.PREFERRED_SIZE
                                        )
                                )
                        )
                        .addContainerGap()
                )
        )
    } // </editor-fold>//GEN-END:initComponents

    private fun LevelChooserComboBoxActionPerformed(evt: ActionEvent) { // GEN-FIRST:event_LevelChooserComboBoxActionPerformed
        object : SwingWorker<Any?, Any?>() {
            @Throws(Exception::class)
            override fun doInBackground(): Any? {
                synchronized(LevelChooserComboBox!!) {
                    if (LevelChooserComboBox!!.selectedItem != null) {
                        try {
                            if (LevelChooserComboBox!!.isEnabled) {
                                stateProperties.setProperty(
                                    PROPERTY_SELECTED_LEVEL,
                                    LevelChooserComboBox!!.selectedIndex.toString()
                                )
                            }
                            val level = getInstance()!!
                                .loadLevel(LevelChooserComboBox!!.selectedItem.toString())
                            gameManager.setLevel(level!!)
                            levelPreviewDisplayPanel!!.setLevel(level)
                            levelPreviewDisplayPanel!!.isOpaque = true
                            levelPreviewDisplayPanel!!.background = level.color
                        } catch (ex: Exception) {
                            logger.error("Could not update level preview!", ex)
                        }
                    }
                }
                return null
            }
        }.execute()
    } // GEN-LAST:event_LevelChooserComboBoxActionPerformed

    private fun jButton1ActionPerformed(evt: ActionEvent) { // GEN-FIRST:event_jButton1ActionPerformed
        MainGUI.instance!!.showLoadingPanel()
        gameManager.startGame()
    } // GEN-LAST:event_jButton1ActionPerformed

    private fun teamAComboBoxActionPerformed(evt: ActionEvent) { // GEN-FIRST:event_teamAComboBoxActionPerformed
        gameManager.addTeam(teamAComboBox!!.selectedItem as TeamData, GameManager.TeamType.A)
        if (teamAComboBox!!.isEnabled) {
            stateProperties.setProperty(PROPERTY_SELECTED_TEAM_A, teamAComboBox!!.selectedIndex.toString())
        }
    } // GEN-LAST:event_teamAComboBoxActionPerformed

    private fun teamBComboBoxActionPerformed(evt: ActionEvent) { // GEN-FIRST:event_teamBComboBoxActionPerformed
        gameManager.addTeam(teamBComboBox!!.selectedItem as TeamData, GameManager.TeamType.B)
        if (teamBComboBox!!.isEnabled) {
            stateProperties.setProperty(PROPERTY_SELECTED_TEAM_B, teamBComboBox!!.selectedIndex.toString())
        }
    } // GEN-LAST:event_teamBComboBoxActionPerformed

    private fun defaultTeamComboBoxActionPerformed(evt: ActionEvent) { // GEN-FIRST:event_defaultTeamComboBoxActionPerformed
    } // GEN-LAST:event_defaultTeamComboBoxActionPerformed

    private fun setDefaultTeam(defaultTeamData: TeamData?) {
        setdefaultTeamButton!!.foreground = Color.BLACK
        setdefaultTeamButton!!.isEnabled = false
        defaultTeamComboBox!!.isEnabled = false
        syncButton!!.isEnabled = true
        try {
            for (i in 0 until defaultTeamComboBox!!.model.size) {
                if ((defaultTeamComboBox!!.model.getElementAt(i) as TeamData).name == defaultTeamData!!.name) {
                    defaultTeamComboBox!!.selectedItem = defaultTeamComboBox!!.model.getElementAt(i)
                    break
                }
            }
        } catch (ex: Exception) {
            ExceptionPrinter.printHistory(CouldNotPerformException("Could not resolve default Team!", ex), logger)
        }
    }

    private fun setdefaultTeamButtonActionPerformed(evt: ActionEvent) { // GEN-FIRST:event_setdefaultTeamButtonActionPerformed
        try {
            val defaultTeamData = defaultTeamComboBox!!.selectedItem as TeamData
            setdefaultTeamButton!!.foreground = Color.BLACK
            saveDefaultTeam(defaultTeamData)
            setDefaultTeam(defaultTeamData)
        } catch (exx: Exception) {
            logger.error("Could not define default team!", exx)
            setdefaultTeamButton!!.foreground = Color.RED
            return
        }
    } // GEN-LAST:event_setdefaultTeamButtonActionPerformed

    private fun syncButtonActionPerformed(evt: ActionEvent) { // GEN-FIRST:event_syncButtonActionPerformed
        instance!!.runSync()
    } // GEN-LAST:event_syncButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var LevelChooserComboBox: JComboBox<String>? = null
    private var connectionStateLabel: JLabel? = null
    private var defaultTeamComboBox: JComboBox<TeamData>? = null
    private var jButton1: JButton? = null
    private var jLabel1: JLabel? = null
    private var jLabel2: JLabel? = null
    private var jLabel3: JLabel? = null
    private var jPanel1: JPanel? = null
    private var jPanel2: JPanel? = null
    private var jPanel3: JPanel? = null
    private var jPanel4: JPanel? = null
    private var jPanel5: JPanel? = null
    private var jPanel6: JPanel? = null
    private var jPanel7: JPanel? = null
    private var jPanel8: JPanel? = null
    private var jPanel9: JPanel? = null
    private var levelPreviewDisplayPanel: LevelDisplayPanel? = null
    private var logoLabel: JLabel? = null
    private var setdefaultTeamButton: JButton? = null
    private var syncButton: JButton? = null
    private var teamAComboBox: JComboBox<TeamData>? = null
    private var teamBComboBox: JComboBox<TeamData>? = null // End of variables declaration//GEN-END:variables

    /**
     * Creates new form ConfigurationPanel
     */
    init {
        initComponents()
        try {
            logoLabel!!.icon = ImageIcon(ImageLoader.getInstance().loadImage("img/PlanetSudoLogoMedium.png"))
        } catch (ex: CouldNotPerformException) {
            ExceptionPrinter.printHistory(CouldNotPerformException("Could not display image", ex), logger)
        }

        instance!!.addPropertyChangeListener { evt ->
            if (evt.propertyName == PlanetSudoClient.CONNECTION_STATE_UPDATE) {
                val state = evt.newValue as PlanetSudoClient.ConnectionState

                connectionStateLabel!!.text = state.description

                when (state) {
                    PlanetSudoClient.ConnectionState.Connecting, PlanetSudoClient.ConnectionState.DownloadStrategies, PlanetSudoClient.ConnectionState.DownloadTeams, PlanetSudoClient.ConnectionState.UploadDefaultStrategy, PlanetSudoClient.ConnectionState.UploadDefaultTeam -> {
                        connectionStateLabel!!.background = Color(100, 200, 100)
                        syncButton!!.isEnabled = false
                    }

                    PlanetSudoClient.ConnectionState.SyncSuccessful -> {
                        connectionStateLabel!!.background = Color(100, 100, 200)
                        syncButton!!.isEnabled = true
                    }

                    PlanetSudoClient.ConnectionState.ConnectionError -> {
                        connectionStateLabel!!.background = Color(200, 100, 100)
                        syncButton!!.isEnabled = true
                    }

                    else -> assert(false)
                }
            }
        }

        stateProperties = Properties()

        try {
            val propertiesFile = File(FileUtils.getTempDirectory(), "planetsudo.properties")
            if (propertiesFile.exists()) {
                stateProperties.load(FileInputStream(propertiesFile))
                logger.info("Load GUI Properties from " + propertiesFile.absolutePath)
            }
        } catch (ex: Exception) {
            ExceptionPrinter.printHistory("Could not load gui properties!", ex, logger)
        }

        initDynamicComponents()

        Runtime.getRuntime().addShutdownHook(object : Thread() {
            override fun run() {
                try {
                    val propertiesFile = File(FileUtils.getTempDirectory(), "planetsudo.properties")
                    logger.info("Store GUI Properties to " + propertiesFile.absolutePath)
                    if (!propertiesFile.exists()) {
                        logger.info("Create: " + propertiesFile.createNewFile())
                    }
                    stateProperties.store(FileOutputStream(propertiesFile), "PlanetSudo GUI Properties")
                } catch (ex: Exception) {
                    ExceptionPrinter.printHistory("Could not store gui properties!", ex, logger)
                }
            }
        })
    }

    companion object {
        const val PROPERTY_SELECTED_TEAM_A: String = "TEAM_A"
        const val PROPERTY_SELECTED_TEAM_B: String = "TEAM_B"
        const val PROPERTY_SELECTED_LEVEL: String = "org.openbase.planetsudo.level"
    }
}
