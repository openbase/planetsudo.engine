/*
 * Copyright (C) 2013 DivineCorporation
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.openbase.planetsudo.view.menu

import org.openbase.planetsudo.game.GameManager.Companion.gameManager
import java.awt.EventQueue
import java.awt.event.ActionEvent
import javax.swing.*
import javax.swing.event.AncestorEvent
import javax.swing.event.AncestorListener
import javax.swing.event.ChangeEvent
import kotlin.math.exp

/**
 * @author Divine Threepwood
 */
class SpeedControlFrame : JFrame() {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        speedSlider = JSlider()
        okButton = JButton()
        defaultButton = JButton()

        defaultCloseOperation = DISPOSE_ON_CLOSE
        title = "SpeedControl"

        speedSlider!!.minimum = 1
        speedSlider!!.paintLabels = true
        speedSlider!!.paintTicks = true
        speedSlider!!.addChangeListener { evt -> speedSliderStateChanged(evt) }
        speedSlider!!.addAncestorListener(object : AncestorListener {
            override fun ancestorAdded(evt: AncestorEvent) {
            }

            override fun ancestorRemoved(evt: AncestorEvent) {
            }

            override fun ancestorMoved(evt: AncestorEvent) {
                speedSliderAncestorMoved(evt)
            }
        })

        okButton!!.text = "Ok"
        okButton!!.addActionListener { evt -> okButtonActionPerformed(evt) }

        defaultButton!!.text = "Standard"
        defaultButton!!.addActionListener { evt -> defaultButtonActionPerformed(evt) }

        val layout = GroupLayout(contentPane)
        contentPane.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(speedSlider, GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE.toInt())
                                .addGroup(
                                    GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE.toInt())
                                        .addComponent(defaultButton)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(
                                            okButton,
                                            GroupLayout.PREFERRED_SIZE,
                                            77,
                                            GroupLayout.PREFERRED_SIZE
                                        )
                                )
                        )
                        .addContainerGap()
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(
                            speedSlider,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(okButton)
                                .addComponent(defaultButton)
                        )
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )

        pack()
    } // </editor-fold>//GEN-END:initComponents

    private fun sliderValueToSpeedFactor(value: Int): Double {
        val x = if (value <= 1) {
            0.01
        } else if (value >= 100) {
            100.0
        } else {
            exp((value - 50) * 0.092)
        }

        println("value $value to $x")
        return x
    }

    private fun okButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_okButtonActionPerformed
        dispose()
    } //GEN-LAST:event_okButtonActionPerformed

    private fun defaultButtonActionPerformed(evt: ActionEvent) { //GEN-FIRST:event_defaultButtonActionPerformed
        gameManager.setDefaultSpeed()
        speedSlider!!.value = 50
    } //GEN-LAST:event_defaultButtonActionPerformed

    private fun speedSliderAncestorMoved(evt: AncestorEvent) { //GEN-FIRST:event_speedSliderAncestorMoved
        gameManager.setGameSpeedFactor(sliderValueToSpeedFactor(speedSlider!!.value))
    } //GEN-LAST:event_speedSliderAncestorMoved

    private fun speedSliderStateChanged(evt: ChangeEvent) { //GEN-FIRST:event_speedSliderStateChanged
        gameManager.setGameSpeedFactor(sliderValueToSpeedFactor(speedSlider!!.value))
    } //GEN-LAST:event_speedSliderStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var defaultButton: JButton? = null
    private var okButton: JButton? = null
    private var speedSlider: JSlider? = null // End of variables declaration//GEN-END:variables

    /**
     * Creates new form SpeedControl
     */
    init {
        initComponents()
    }

    companion object {
        private val instance: SpeedControlFrame? = null

        @Synchronized
        fun display() {
            if (instance == null) {
                EventQueue.invokeLater { SpeedControlFrame().isVisible = true }
                try {
                    Thread.sleep(500)
                } catch (ex: InterruptedException) {
                    Thread.currentThread().interrupt()
                }
            } else {
                instance.isVisible = true
            }
        }
    }
}
