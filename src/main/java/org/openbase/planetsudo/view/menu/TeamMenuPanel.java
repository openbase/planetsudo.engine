package org.openbase.planetsudo.view.menu;

/*-
 * #%L
 * PlanetSudo GameEngine
 * %%
 * Copyright (C) 2009 - 2020 openbase.org
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.Timer;
import org.openbase.planetsudo.game.GameManager;
import static org.openbase.planetsudo.game.GameObjectImages.IMAGE_DIRECTORY;
import org.openbase.planetsudo.game.Team;
import org.openbase.planetsudo.level.levelobjects.Mothership;
import org.slf4j.Logger;
import java.util.List;
import org.openbase.jul.exception.CouldNotPerformException;
import org.openbase.jul.exception.printer.ExceptionPrinter;
import org.slf4j.LoggerFactory;

/**
 *
 * @author noxus
 */
public class TeamMenuPanel extends javax.swing.JPanel implements PropertyChangeListener, ActionListener {

    private final Logger logger = LoggerFactory.getLogger(getClass());

    private Team team;
    private final Timer timer;

    /**
     * Creates new form TeamPanel
     */
    public TeamMenuPanel() {
        this.initComponents();
        this.mothershipFuelProgressBar.setMinimum(0);
        this.mothershipFuelProgressBar.setMaximum(Mothership.MOTHERSHIP_FUEL_VOLUME);
        this.towerFuelProgressBar.setMinimum(0);
        this.towerFuelProgressBar.setMaximum(Mothership.TOWER_FUEL_VOLUME);
        this.timer = new Timer(300, this);
    }

    private void updateComponents() {
        teamColorPanel.setBackground(team.getTeamColor());
        teamNameLabel.setText(team.getName());
        mothershipFuelProgressBar.setForeground(Color.BLACK);
        mothershipFuelProgressBar.setValue(team.getMothership().getFuel());
        towerFuelProgressBar.setForeground(Color.BLACK);
        towerFuelProgressBar.setValue(team.getMothership().getTower().getFuel());
        teamAgentLabel.setText(team.getAgentCount() + "");
        mothershipShieldProgressBar.setValue(team.getMothership().getShieldForce());
        towerShieldProgressBar.setValue(team.getMothership().getTower().getShieldForce());
        resourcePointsLabel.setText(team.getPoints() + "");
        updateMothershipFuelProgressBar();
        updateMothershipShieldProgressBar();
        updateTowerFuelProgressBar();
        updateTowerShieldProgressBar();
        //		String memberList = "<html>";
        //		for(String member : team.getMembers()) {
        //			memberList += member+"<br />";
        //		}
        //		memberList += "</html>";
        List<String> members = team.getMembers();
        teamMemberALabel.setText(members.get(0));
        teamMemberBLabel.setText("");
        teamMemberA.setVisible(false);
        teamMemberB.setVisible(false);
        try {
            teamMemberA.setImage(IMAGE_DIRECTORY + "/teams/team_" + team.getName() + "_A.jpg");
            teamMemberA.setVisible(true);
        } catch (Exception ex) {
            logger.warn("Could not load member image!", ex);
        }
        if (members.size() > 1) {
            teamMemberBLabel.setText(members.get(1));
            try {
                teamMemberB.setImage(IMAGE_DIRECTORY + "/teams/team_" + team.getName() + "_B.jpg");
                teamMemberB.setVisible(true);
            } catch (Exception ex) {
                ExceptionPrinter.printHistory(new CouldNotPerformException("Could not display all team images!", ex), logger);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        teamMothershipPanel = new javax.swing.JPanel();
        mothershipFuelProgressBar = new javax.swing.JProgressBar();
        mothershipShieldProgressBar = new javax.swing.JProgressBar();
        jPanel1 = new javax.swing.JPanel();
        saveAgentsPointsNameLabel = new javax.swing.JLabel();
        mothershipShieldPointsNameLabel = new javax.swing.JLabel();
        mothershipShieldPointsLabel = new javax.swing.JLabel();
        resourcePointsLabel = new javax.swing.JLabel();
        resourcePointsNameLabel = new javax.swing.JLabel();
        teamPointsNameLabel = new javax.swing.JLabel();
        saveAgentsPointsLabel = new javax.swing.JLabel();
        teamPointsLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        teamAgentLabel2 = new javax.swing.JLabel();
        teamAgentLabel = new javax.swing.JLabel();
        teamMemberALabel = new javax.swing.JLabel();
        teamMemberLabel2 = new javax.swing.JLabel();
        teamMemberA = new org.openbase.jul.visual.swing.component.ImageTransformationPanel();
        teamMemberBLabel = new javax.swing.JLabel();
        teamMemberB = new org.openbase.jul.visual.swing.component.ImageTransformationPanel();
        jPanel3 = new javax.swing.JPanel();
        teamColorPanel = new javax.swing.JPanel();
        teamNameLabel = new javax.swing.JLabel();
        teamTowerPanel = new javax.swing.JPanel();
        towerFuelProgressBar = new javax.swing.JProgressBar();
        towerShieldProgressBar = new javax.swing.JProgressBar();
        teamFinalStateLabel = new javax.swing.JLabel();

        setOpaque(false);

        teamMothershipPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mutterschiff"));
        teamMothershipPanel.setOpaque(false);

        mothershipFuelProgressBar.setString("Treibstoff");
        mothershipFuelProgressBar.setStringPainted(true);

        mothershipShieldProgressBar.setString("Schutzschild");
        mothershipShieldProgressBar.setStringPainted(true);

        javax.swing.GroupLayout teamMothershipPanelLayout = new javax.swing.GroupLayout(teamMothershipPanel);
        teamMothershipPanel.setLayout(teamMothershipPanelLayout);
        teamMothershipPanelLayout.setHorizontalGroup(
            teamMothershipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamMothershipPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teamMothershipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mothershipFuelProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mothershipShieldProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        teamMothershipPanelLayout.setVerticalGroup(
            teamMothershipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamMothershipPanelLayout.createSequentialGroup()
                .addComponent(mothershipFuelProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mothershipShieldProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Punkte"));
        jPanel1.setOpaque(false);

        saveAgentsPointsNameLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        saveAgentsPointsNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        saveAgentsPointsNameLabel.setText("Agenten Gesichert:");

        mothershipShieldPointsNameLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        mothershipShieldPointsNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        mothershipShieldPointsNameLabel.setText("Verteidigung:");

        mothershipShieldPointsLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        mothershipShieldPointsLabel.setText("-");

        resourcePointsLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        resourcePointsLabel.setText("0");

        resourcePointsNameLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        resourcePointsNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        resourcePointsNameLabel.setText("Resourcen:");

        teamPointsNameLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        teamPointsNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        teamPointsNameLabel.setText("Gesamt Punktzahl:");

        saveAgentsPointsLabel.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        saveAgentsPointsLabel.setText("-");

        teamPointsLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        teamPointsLabel.setText("-");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(teamPointsNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveAgentsPointsNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mothershipShieldPointsNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resourcePointsNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(teamPointsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mothershipShieldPointsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                    .addComponent(resourcePointsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveAgentsPointsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resourcePointsNameLabel)
                    .addComponent(resourcePointsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mothershipShieldPointsNameLabel)
                    .addComponent(mothershipShieldPointsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveAgentsPointsNameLabel)
                    .addComponent(saveAgentsPointsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamPointsNameLabel)
                    .addComponent(teamPointsLabel))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel2.setOpaque(false);

        jPanel4.setBackground(new java.awt.Color(255, 128, 0));
        jPanel4.setOpaque(false);

        teamAgentLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        teamAgentLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        teamAgentLabel2.setText("Agenten:");

        teamAgentLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        teamAgentLabel.setText("0");

        teamMemberALabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        teamMemberALabel.setText("Member Member");
        teamMemberALabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        teamMemberLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        teamMemberLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        teamMemberLabel2.setText("Entwickler:");

        teamMemberA.setPreferredSize(new java.awt.Dimension(180, 133));

        javax.swing.GroupLayout teamMemberALayout = new javax.swing.GroupLayout(teamMemberA);
        teamMemberA.setLayout(teamMemberALayout);
        teamMemberALayout.setHorizontalGroup(
            teamMemberALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        teamMemberALayout.setVerticalGroup(
            teamMemberALayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 133, Short.MAX_VALUE)
        );

        teamMemberBLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        teamMemberBLabel.setText("Member Member");
        teamMemberBLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        teamMemberB.setPreferredSize(new java.awt.Dimension(180, 133));

        javax.swing.GroupLayout teamMemberBLayout = new javax.swing.GroupLayout(teamMemberB);
        teamMemberB.setLayout(teamMemberBLayout);
        teamMemberBLayout.setHorizontalGroup(
            teamMemberBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 180, Short.MAX_VALUE)
        );
        teamMemberBLayout.setVerticalGroup(
            teamMemberBLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 133, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(teamAgentLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(teamMemberLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(teamAgentLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teamMemberBLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(teamMemberALabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(teamMemberB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teamMemberA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teamAgentLabel2)
                    .addComponent(teamAgentLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamMemberLabel2)
                    .addComponent(teamMemberA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teamMemberALabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(teamMemberB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teamMemberBLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.setOpaque(false);

        teamColorPanel.setBackground(new java.awt.Color(51, 102, 255));
        teamColorPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        teamColorPanel.setPreferredSize(new java.awt.Dimension(16, 16));

        javax.swing.GroupLayout teamColorPanelLayout = new javax.swing.GroupLayout(teamColorPanel);
        teamColorPanel.setLayout(teamColorPanelLayout);
        teamColorPanelLayout.setHorizontalGroup(
            teamColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );
        teamColorPanelLayout.setVerticalGroup(
            teamColorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        teamNameLabel.setText("Team");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(teamColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teamNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamColorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(teamNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        teamTowerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Turm"));
        teamTowerPanel.setOpaque(false);

        towerFuelProgressBar.setString("Treibstoff");
        towerFuelProgressBar.setStringPainted(true);

        towerShieldProgressBar.setString("Schutzschild");
        towerShieldProgressBar.setStringPainted(true);

        javax.swing.GroupLayout teamTowerPanelLayout = new javax.swing.GroupLayout(teamTowerPanel);
        teamTowerPanel.setLayout(teamTowerPanelLayout);
        teamTowerPanelLayout.setHorizontalGroup(
            teamTowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamTowerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teamTowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(towerFuelProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(towerShieldProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        teamTowerPanelLayout.setVerticalGroup(
            teamTowerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teamTowerPanelLayout.createSequentialGroup()
                .addComponent(towerFuelProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(towerShieldProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        teamFinalStateLabel.setFont(new java.awt.Font("Dialog", 1, 30)); // NOI18N
        teamFinalStateLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        teamFinalStateLabel.setText("Gewinner");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(teamTowerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(teamFinalStateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(teamMothershipPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(teamMothershipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teamTowerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(teamFinalStateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setTeam(Team team) {
        if (team != null) {
            team.removePropertyChangeListener(this);
            team.getMothership().removePropertyChangeListener(this);
        }
        this.team = team;
        team.addPropertyChangeListener(this);
        team.getMothership().addPropertyChangeListener(this);
        updateComponents();
        timer.stop();
        teamFinalStateLabel.setText("");
        teamFinalStateLabel.setEnabled(false);
        teamFinalStateLabel.setText("");
        saveAgentsPointsLabel.setText("-");
        teamPointsLabel.setText("-");
        mothershipShieldPointsLabel.setText("-");
    }

    public void displayEndCalculation() {
        Thread t = new Thread() {
            @Override
            public void run() {
                animateEndCalculation();
            }
        };
        t.setPriority(Thread.MIN_PRIORITY);
        t.start();
    }
    public final static int BLINK_ANIMATION = 100;
    public final static int COUNT_ANIMATION = 30;

    private void animateEndCalculation() {
        int tmpValue;
        try {
            mothershipShieldPointsLabel.setEnabled(false);
            mothershipShieldPointsNameLabel.setEnabled(false);
            Thread.sleep(BLINK_ANIMATION);
            mothershipShieldPointsLabel.setEnabled(true);
            mothershipShieldPointsNameLabel.setEnabled(true);
            tmpValue = team.getMothership().getShieldPoints();
            for (int i = 0; i <= tmpValue; i++) {
                mothershipShieldPointsLabel.setText(Integer.toString(i) + "P");
                Thread.sleep(COUNT_ANIMATION);
            }
            mothershipShieldPointsLabel.setEnabled(false);
            mothershipShieldPointsNameLabel.setEnabled(false);
            Thread.sleep(BLINK_ANIMATION);
            mothershipShieldPointsLabel.setEnabled(true);
            mothershipShieldPointsNameLabel.setEnabled(true);
            Thread.sleep(BLINK_ANIMATION);
            mothershipShieldPointsLabel.setEnabled(false);
            mothershipShieldPointsNameLabel.setEnabled(false);
            Thread.sleep(BLINK_ANIMATION);
            mothershipShieldPointsLabel.setEnabled(true);
            mothershipShieldPointsNameLabel.setEnabled(true);
            Thread.sleep(BLINK_ANIMATION);

            saveAgentsPointsLabel.setEnabled(false);
            saveAgentsPointsNameLabel.setEnabled(false);
            Thread.sleep(BLINK_ANIMATION);
            saveAgentsPointsLabel.setEnabled(true);
            saveAgentsPointsNameLabel.setEnabled(true);
            tmpValue = team.getMothership().getAgentsAtHomePoints();
            for (int i = 0; i <= tmpValue; i++) {
                saveAgentsPointsLabel.setText(Integer.toString(i) + "P");
                Thread.sleep(COUNT_ANIMATION);
            }
            saveAgentsPointsLabel.setEnabled(false);
            saveAgentsPointsNameLabel.setEnabled(false);
            Thread.sleep(BLINK_ANIMATION);
            saveAgentsPointsLabel.setEnabled(true);
            saveAgentsPointsNameLabel.setEnabled(true);
            Thread.sleep(BLINK_ANIMATION);
            saveAgentsPointsLabel.setEnabled(false);
            saveAgentsPointsNameLabel.setEnabled(false);
            Thread.sleep(BLINK_ANIMATION);
            saveAgentsPointsLabel.setEnabled(true);
            saveAgentsPointsNameLabel.setEnabled(true);
            Thread.sleep(BLINK_ANIMATION);

            teamPointsLabel.setEnabled(false);
            teamPointsNameLabel.setEnabled(false);
            Thread.sleep(BLINK_ANIMATION);
            teamPointsLabel.setEnabled(true);
            teamPointsNameLabel.setEnabled(true);
            tmpValue = team.getFinalPoints();
            for (int i = 0; i <= tmpValue; i++) {
                teamPointsLabel.setText(Integer.toString(i) + "P");
                Thread.sleep(COUNT_ANIMATION);
            }
            teamPointsLabel.setEnabled(false);
            teamPointsNameLabel.setEnabled(false);
            Thread.sleep(BLINK_ANIMATION);
            teamPointsLabel.setEnabled(true);
            teamPointsNameLabel.setEnabled(true);
            Thread.sleep(BLINK_ANIMATION);
            teamPointsLabel.setEnabled(false);
            teamPointsNameLabel.setEnabled(false);
            Thread.sleep(BLINK_ANIMATION);
            teamPointsLabel.setEnabled(true);
            teamPointsNameLabel.setEnabled(true);
            Thread.sleep(BLINK_ANIMATION);

            if (GameManager.getInstance().isWinner(team)) {
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setText("Gewinner");
                teamFinalStateLabel.setForeground(Color.GREEN);
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setEnabled(true);
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setEnabled(false);
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setEnabled(true);
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setEnabled(false);
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setEnabled(true);
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setEnabled(false);
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setEnabled(true);
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setEnabled(false);
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setEnabled(true);
            } else {
                teamFinalStateLabel.setText("Verlierer");
                Thread.sleep(BLINK_ANIMATION);
                teamFinalStateLabel.setForeground(Color.RED);
                teamFinalStateLabel.setEnabled(true);
            }

        } catch (InterruptedException ex) {
            logger.warn("Animation failed!", ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JProgressBar mothershipFuelProgressBar;
    private javax.swing.JLabel mothershipShieldPointsLabel;
    private javax.swing.JLabel mothershipShieldPointsNameLabel;
    private javax.swing.JProgressBar mothershipShieldProgressBar;
    private javax.swing.JLabel resourcePointsLabel;
    private javax.swing.JLabel resourcePointsNameLabel;
    private javax.swing.JLabel saveAgentsPointsLabel;
    private javax.swing.JLabel saveAgentsPointsNameLabel;
    private javax.swing.JLabel teamAgentLabel;
    private javax.swing.JLabel teamAgentLabel2;
    private javax.swing.JPanel teamColorPanel;
    private javax.swing.JLabel teamFinalStateLabel;
    private org.openbase.jul.visual.swing.component.ImageTransformationPanel teamMemberA;
    private javax.swing.JLabel teamMemberALabel;
    private org.openbase.jul.visual.swing.component.ImageTransformationPanel teamMemberB;
    private javax.swing.JLabel teamMemberBLabel;
    private javax.swing.JLabel teamMemberLabel2;
    private javax.swing.JPanel teamMothershipPanel;
    private javax.swing.JLabel teamNameLabel;
    private javax.swing.JLabel teamPointsLabel;
    private javax.swing.JLabel teamPointsNameLabel;
    private javax.swing.JPanel teamTowerPanel;
    private javax.swing.JProgressBar towerFuelProgressBar;
    private javax.swing.JProgressBar towerShieldProgressBar;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (evt.getPropertyName().equals(Mothership.MOTHERSHIP_FUEL_STATE_CHANGE)) {
            mothershipFuelProgressBar.setValue((Integer) evt.getNewValue());
            updateMothershipFuelProgressBar();
        } else if (evt.getPropertyName().equals(Mothership.MOTHERSHIP_SHIELD_STATE_CHANGE)) {
            mothershipShieldProgressBar.setValue((Integer) evt.getNewValue());
            updateMothershipShieldProgressBar();
        } else if (evt.getPropertyName().equals(Team.POINT_STATE_CHANGE)) {
            resourcePointsLabel.setText(evt.getNewValue().toString() + "P");
        }
    }

    private void updateMothershipFuelProgressBar() {

        mothershipFuelProgressBar.setString("Treibstoff " + (int) (mothershipFuelProgressBar.getPercentComplete() * 100) + "%");
        if (mothershipFuelProgressBar.getPercentComplete() < 0.25) {
            timer.start();
        }
        int green, red;
        if (mothershipFuelProgressBar.getPercentComplete() >= 0.5) {
            red = (int) (255 - (255 * (mothershipFuelProgressBar.getPercentComplete() - 0.5) * 2));
            green = 255;
        } else {
            red = 255;
            green = (int) (255 * (mothershipFuelProgressBar.getPercentComplete()) * 2);
        }
        mothershipFuelProgressBar.setForeground(new Color(red, green, 0));
    }

    private void updateMothershipShieldProgressBar() {

        mothershipShieldProgressBar.setString("Schutzschild " + (int) (mothershipShieldProgressBar.getPercentComplete() * 100) + "%");
        if (mothershipShieldProgressBar.getPercentComplete() < Mothership.BURNING_MOTHERSHIP / 100) {
            timer.start();
        }
        int blue, red;
        if (mothershipShieldProgressBar.getPercentComplete() >= 0.5) {
            red = (int) (255 - (255 * (mothershipShieldProgressBar.getPercentComplete() - 0.5) * 2));
            blue = 255;
        } else {
            red = 255;
            blue = (int) (255 * (mothershipShieldProgressBar.getPercentComplete()) * 2);
        }
        mothershipShieldProgressBar.setForeground(new Color(red, 0, blue));
    }

    private void updateTowerFuelProgressBar() {

        towerFuelProgressBar.setString("Treibstoff " + (int) (towerFuelProgressBar.getPercentComplete() * 100) + "%");
        if (towerFuelProgressBar.getPercentComplete() < 0.25) {
            timer.start();
        }
        int green, red;
        if (towerFuelProgressBar.getPercentComplete() >= 0.5) {
            red = (int) (255 - (255 * (towerFuelProgressBar.getPercentComplete() - 0.5) * 2));
            green = 255;
        } else {
            red = 255;
            green = (int) (255 * (towerFuelProgressBar.getPercentComplete()) * 2);
        }
        towerFuelProgressBar.setForeground(new Color(red, green, 0));
    }

    private void updateTowerShieldProgressBar() {

        towerShieldProgressBar.setString("Schutzschild " + (int) (towerShieldProgressBar.getPercentComplete() * 100) + "%");
        if (towerShieldProgressBar.getPercentComplete() < Mothership.BURNING_TOWER / 100) {
            timer.start();
        }
        int blue, red;
        if (towerShieldProgressBar.getPercentComplete() >= 0.5) {
            red = (int) (255 - (255 * (towerShieldProgressBar.getPercentComplete() - 0.5) * 2));
            blue = 255;
        } else {
            red = 255;
            blue = (int) (255 * (towerShieldProgressBar.getPercentComplete()) * 2);
        }
        towerShieldProgressBar.setForeground(new Color(red, 0, blue));
    }
    private boolean blinkMothership, blinkTower;

    @Override
    public void actionPerformed(ActionEvent ex) {
        if (mothershipShieldProgressBar.getPercentComplete() < Mothership.BURNING_MOTHERSHIP / 100) {
            if (blinkMothership) {
                mothershipShieldProgressBar.setForeground(Color.BLACK);
            } else {
                updateMothershipShieldProgressBar();
            }
        }

        if (mothershipFuelProgressBar.getPercentComplete() < 0.25) {
            if (blinkMothership) {
                mothershipFuelProgressBar.setForeground(Color.BLACK);
            } else {
                updateMothershipFuelProgressBar();
            }
        }
        blinkMothership = !blinkMothership;

        if (towerShieldProgressBar.getPercentComplete() < Mothership.BURNING_TOWER / 100) {
            if (blinkTower) {
                towerShieldProgressBar.setForeground(Color.BLACK);
            } else {
                updateTowerShieldProgressBar();
            }
        }

        if (towerFuelProgressBar.getPercentComplete() < 0.25) {
            if (blinkTower) {
                towerFuelProgressBar.setForeground(Color.BLACK);
            } else {
                updateTowerFuelProgressBar();
            }
        }
        blinkTower = !blinkTower;

        if (mothershipFuelProgressBar.getPercentComplete() > 0.25 && mothershipShieldProgressBar.getPercentComplete() > Mothership.BURNING_MOTHERSHIP / 100) {
            updateMothershipShieldProgressBar();
            updateMothershipFuelProgressBar();
        }

        if (towerFuelProgressBar.getPercentComplete() > 0.25 && towerShieldProgressBar.getPercentComplete() > Mothership.BURNING_TOWER / 100) {
            updateTowerShieldProgressBar();
            updateTowerFuelProgressBar();
        }

        if (mothershipFuelProgressBar.getPercentComplete() > 0.25 && mothershipShieldProgressBar.getPercentComplete() > Mothership.BURNING_MOTHERSHIP / 100 && towerFuelProgressBar.getPercentComplete() > 0.25 && towerShieldProgressBar.getPercentComplete() > Mothership.BURNING_TOWER / 100) {
            timer.stop();
        }
    }
}
