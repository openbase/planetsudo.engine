package org.openbase.planetsudo.view.menu

import org.openbase.jul.exception.CouldNotPerformException
import org.openbase.jul.exception.printer.ExceptionPrinter
import org.openbase.jul.visual.swing.component.ImageTransformationPanel
import org.openbase.planetsudo.game.GameManager.Companion.gameManager
import org.openbase.planetsudo.game.GameObjectImages
import org.openbase.planetsudo.game.Team
import org.openbase.planetsudo.level.levelobjects.Mothership
import org.openbase.planetsudo.level.levelobjects.Tower
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.awt.Color
import java.awt.Dimension
import java.awt.Font
import java.awt.event.ActionEvent
import java.awt.event.ActionListener
import java.beans.PropertyChangeEvent
import java.beans.PropertyChangeListener
import javax.swing.*

/**
 * @author noxus
 */
class TeamMenuPanel : JPanel(), PropertyChangeListener, ActionListener {
    private val logger: Logger = LoggerFactory.getLogger(javaClass)

    private var team: Team? = null
    private val timer: Timer

    private fun updateComponents() {
        teamColorPanel!!.background = team!!.teamColor
        teamNameLabel!!.text = team!!.name
        mothershipFuelProgressBar!!.foreground = Color.BLACK
        mothershipFuelProgressBar!!.value = team!!.mothership!!.fuel
        towerFuelProgressBar!!.foreground = Color.BLACK
        towerFuelProgressBar!!.value = team!!.mothership!!.tower.fuel
        teamAgentLabel!!.text = team!!.agentCount.toString() + ""
        mothershipShieldProgressBar!!.value = team!!.mothership!!.shieldForce
        towerShieldProgressBar!!.value = team!!.mothership!!.tower.shieldForce
        resourcePointsLabel!!.text = team!!.points.toString() + ""
        updateMothershipFuelProgressBar()
        updateMothershipShieldProgressBar()
        updateTowerFuelProgressBar()
        updateTowerShieldProgressBar()
        //		String memberList = "<html>";
        //		for(String member : team.getMembers()) {
        //			memberList += member+"<br />";
        //		}
        //		memberList += "</html>";
        val members = team!!.getMembers()
        teamMemberALabel!!.text = members!![0]
        teamMemberBLabel!!.text = ""
        teamMemberA!!.isVisible = false
        teamMemberB!!.isVisible = false
        val imageUri = GameObjectImages.IMAGE_DIRECTORY + "/teams/team_" + team!!.name + "_A.jpg"
        try {
            teamMemberA!!.setImage(GameObjectImages.IMAGE_DIRECTORY + "/teams/team_" + team!!.name + "_A.jpg")
            teamMemberA!!.isVisible = true
        } catch (ex: Exception) {
            logger.warn("Could not load member image [\${imageUri}] and use fallback instead.")
            try {
                teamMemberA!!.setImage(GameObjectImages.IMAGE_DIRECTORY + "/teams/fallback.jpg")
                teamMemberA!!.isVisible = true
            } catch (e: CouldNotPerformException) {
                ExceptionPrinter.printHistory("Could not load fallback image!", e, logger)
            }
        }

        if (members.size > 1) {
            teamMemberBLabel!!.text = members[1]
            try {
                teamMemberB!!.setImage(GameObjectImages.IMAGE_DIRECTORY + "/teams/team_" + team!!.name + "_B.jpg")
                teamMemberB!!.isVisible = true
            } catch (ex: Exception) {
                try {
                    teamMemberB!!.setImage(GameObjectImages.IMAGE_DIRECTORY + "/teams/fallback.jpg")
                    teamMemberB!!.isVisible = true
                } catch (e: CouldNotPerformException) {
                    ExceptionPrinter.printHistory("Could not load fallback image!", e, logger)
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private fun initComponents() {
        teamMothershipPanel = JPanel()
        mothershipFuelProgressBar = JProgressBar()
        mothershipShieldProgressBar = JProgressBar()
        jPanel1 = JPanel()
        saveAgentsPointsNameLabel = JLabel()
        mothershipShieldPointsNameLabel = JLabel()
        mothershipShieldPointsLabel = JLabel()
        resourcePointsLabel = JLabel()
        resourcePointsNameLabel = JLabel()
        teamPointsNameLabel = JLabel()
        saveAgentsPointsLabel = JLabel()
        teamPointsLabel = JLabel()
        jPanel2 = JPanel()
        jPanel4 = JPanel()
        teamAgentLabel2 = JLabel()
        teamAgentLabel = JLabel()
        teamMemberALabel = JLabel()
        teamMemberLabel2 = JLabel()
        teamMemberA = ImageTransformationPanel()
        teamMemberBLabel = JLabel()
        teamMemberB = ImageTransformationPanel()
        jPanel3 = JPanel()
        teamColorPanel = JPanel()
        teamNameLabel = JLabel()
        teamTowerPanel = JPanel()
        towerFuelProgressBar = JProgressBar()
        towerShieldProgressBar = JProgressBar()
        teamFinalStateLabel = JLabel()

        isOpaque = false

        teamMothershipPanel!!.border = BorderFactory.createTitledBorder("Mutterschiff")
        teamMothershipPanel!!.isOpaque = false

        mothershipFuelProgressBar!!.string = "Treibstoff"
        mothershipFuelProgressBar!!.isStringPainted = true

        mothershipShieldProgressBar!!.string = "Schutzschild"
        mothershipShieldProgressBar!!.isStringPainted = true

        val teamMothershipPanelLayout = GroupLayout(teamMothershipPanel)
        teamMothershipPanel!!.layout = teamMothershipPanelLayout
        teamMothershipPanelLayout.setHorizontalGroup(
            teamMothershipPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    teamMothershipPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            teamMothershipPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    mothershipFuelProgressBar,
                                    GroupLayout.Alignment.TRAILING,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    mothershipShieldProgressBar,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap()
                )
        )
        teamMothershipPanelLayout.setVerticalGroup(
            teamMothershipPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    teamMothershipPanelLayout.createSequentialGroup()
                        .addComponent(
                            mothershipFuelProgressBar,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            mothershipShieldProgressBar,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addContainerGap()
                )
        )

        jPanel1!!.border = BorderFactory.createTitledBorder("Punkte")
        jPanel1!!.isOpaque = false

        saveAgentsPointsNameLabel!!.font = Font("Dialog", 0, 14) // NOI18N
        saveAgentsPointsNameLabel!!.horizontalAlignment = SwingConstants.RIGHT
        saveAgentsPointsNameLabel!!.text = "Agenten Gesichert:"

        mothershipShieldPointsNameLabel!!.font = Font("Dialog", 0, 14) // NOI18N
        mothershipShieldPointsNameLabel!!.horizontalAlignment = SwingConstants.RIGHT
        mothershipShieldPointsNameLabel!!.text = "Verteidigung:"

        mothershipShieldPointsLabel!!.font = Font("Dialog", 0, 14) // NOI18N
        mothershipShieldPointsLabel!!.text = "-"

        resourcePointsLabel!!.font = Font("Dialog", 0, 14) // NOI18N
        resourcePointsLabel!!.text = "0"

        resourcePointsNameLabel!!.font = Font("Dialog", 0, 14) // NOI18N
        resourcePointsNameLabel!!.horizontalAlignment = SwingConstants.RIGHT
        resourcePointsNameLabel!!.text = "Resourcen:"

        teamPointsNameLabel!!.font = Font("Dialog", 1, 14) // NOI18N
        teamPointsNameLabel!!.horizontalAlignment = SwingConstants.RIGHT
        teamPointsNameLabel!!.text = "Gesamt Punktzahl:"

        saveAgentsPointsLabel!!.font = Font("Dialog", 0, 14) // NOI18N
        saveAgentsPointsLabel!!.text = "-"

        teamPointsLabel!!.font = Font("Dialog", 1, 14) // NOI18N
        teamPointsLabel!!.text = "-"

        val jPanel1Layout = GroupLayout(jPanel1)
        jPanel1!!.layout = jPanel1Layout
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel1Layout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                        .addGroup(
                            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                .addComponent(
                                    teamPointsNameLabel,
                                    GroupLayout.Alignment.LEADING,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    saveAgentsPointsNameLabel,
                                    GroupLayout.Alignment.LEADING,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    mothershipShieldPointsNameLabel,
                                    GroupLayout.Alignment.LEADING,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    resourcePointsNameLabel,
                                    GroupLayout.Alignment.LEADING,
                                    GroupLayout.DEFAULT_SIZE,
                                    155,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(
                                    teamPointsLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    mothershipShieldPointsLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    88,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    resourcePointsLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    saveAgentsPointsLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                )
        )
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(resourcePointsNameLabel)
                                .addComponent(resourcePointsLabel)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(mothershipShieldPointsNameLabel)
                                .addComponent(mothershipShieldPointsLabel)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(saveAgentsPointsNameLabel)
                                .addComponent(saveAgentsPointsLabel)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(teamPointsNameLabel)
                                .addComponent(teamPointsLabel)
                        )
                        .addContainerGap(30, Short.MAX_VALUE.toInt())
                )
        )

        jPanel2!!.isOpaque = false

        jPanel4!!.background = Color(255, 128, 0)
        jPanel4!!.isOpaque = false

        teamAgentLabel2!!.font = Font("Dialog", 1, 14) // NOI18N
        teamAgentLabel2!!.horizontalAlignment = SwingConstants.RIGHT
        teamAgentLabel2!!.text = "Agenten:"

        teamAgentLabel!!.font = Font("Dialog", 1, 14) // NOI18N
        teamAgentLabel!!.text = "0"

        teamMemberALabel!!.font = Font("Dialog", 1, 14) // NOI18N
        teamMemberALabel!!.text = "Member Member"
        teamMemberALabel!!.verticalAlignment = SwingConstants.TOP

        teamMemberLabel2!!.font = Font("Dialog", 1, 14) // NOI18N
        teamMemberLabel2!!.horizontalAlignment = SwingConstants.RIGHT
        teamMemberLabel2!!.text = "Entwickler:"

        teamMemberA!!.preferredSize = Dimension(180, 133)

        val teamMemberALayout = GroupLayout(teamMemberA)
        teamMemberA!!.layout = teamMemberALayout
        teamMemberALayout.setHorizontalGroup(
            teamMemberALayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 180, Short.MAX_VALUE.toInt())
        )
        teamMemberALayout.setVerticalGroup(
            teamMemberALayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 133, Short.MAX_VALUE.toInt())
        )

        teamMemberBLabel!!.font = Font("Dialog", 1, 14) // NOI18N
        teamMemberBLabel!!.text = "Member Member"
        teamMemberBLabel!!.verticalAlignment = SwingConstants.TOP

        teamMemberB!!.preferredSize = Dimension(180, 133)

        val teamMemberBLayout = GroupLayout(teamMemberB)
        teamMemberB!!.layout = teamMemberBLayout
        teamMemberBLayout.setHorizontalGroup(
            teamMemberBLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 180, Short.MAX_VALUE.toInt())
        )
        teamMemberBLayout.setVerticalGroup(
            teamMemberBLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 133, Short.MAX_VALUE.toInt())
        )

        val jPanel4Layout = GroupLayout(jPanel4)
        jPanel4!!.layout = jPanel4Layout
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel4Layout.createSequentialGroup()
                        .addGroup(
                            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(
                                    teamAgentLabel2,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(teamMemberLabel2)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(
                            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(
                                    teamAgentLabel,
                                    GroupLayout.PREFERRED_SIZE,
                                    120,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(
                                    teamMemberBLabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    teamMemberALabel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    teamMemberB,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(
                                    teamMemberA,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(teamAgentLabel2)
                                .addComponent(teamAgentLabel)
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(
                            jPanel4Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(teamMemberLabel2)
                                .addComponent(
                                    teamMemberA,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(teamMemberALabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(
                            teamMemberB,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(teamMemberBLabel)
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                )
        )

        val jPanel2Layout = GroupLayout(jPanel2)
        jPanel2!!.layout = jPanel2Layout
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(
                            jPanel4,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addContainerGap()
                )
        )
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE.toInt())
                        .addComponent(
                            jPanel4,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addContainerGap()
                )
        )

        jPanel3!!.isOpaque = false

        teamColorPanel!!.background = Color(51, 102, 255)
        teamColorPanel!!.border = BorderFactory.createLineBorder(Color(0, 0, 0), 2)
        teamColorPanel!!.preferredSize = Dimension(16, 16)

        val teamColorPanelLayout = GroupLayout(teamColorPanel)
        teamColorPanel!!.layout = teamColorPanelLayout
        teamColorPanelLayout.setHorizontalGroup(
            teamColorPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 12, Short.MAX_VALUE.toInt())
        )
        teamColorPanelLayout.setVerticalGroup(
            teamColorPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGap(0, 12, Short.MAX_VALUE.toInt())
        )

        teamNameLabel!!.text = "Team"

        val jPanel3Layout = GroupLayout(jPanel3)
        jPanel3!!.layout = jPanel3Layout
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel3Layout.createSequentialGroup()
                        .addComponent(
                            teamColorPanel,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            teamNameLabel,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addContainerGap()
                )
        )
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    jPanel3Layout.createSequentialGroup()
                        .addGroup(
                            jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    teamColorPanel,
                                    GroupLayout.PREFERRED_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.PREFERRED_SIZE
                                )
                                .addComponent(teamNameLabel, GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE.toInt())
                        )
                        .addContainerGap()
                )
        )

        teamTowerPanel!!.border = BorderFactory.createTitledBorder("Turm")
        teamTowerPanel!!.isOpaque = false

        towerFuelProgressBar!!.string = "Treibstoff"
        towerFuelProgressBar!!.isStringPainted = true

        towerShieldProgressBar!!.string = "Schutzschild"
        towerShieldProgressBar!!.isStringPainted = true

        val teamTowerPanelLayout = GroupLayout(teamTowerPanel)
        teamTowerPanel!!.layout = teamTowerPanelLayout
        teamTowerPanelLayout.setHorizontalGroup(
            teamTowerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    teamTowerPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            teamTowerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    towerFuelProgressBar,
                                    GroupLayout.Alignment.TRAILING,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    towerShieldProgressBar,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                        .addContainerGap()
                )
        )
        teamTowerPanelLayout.setVerticalGroup(
            teamTowerPanelLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    teamTowerPanelLayout.createSequentialGroup()
                        .addComponent(
                            towerFuelProgressBar,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            towerShieldProgressBar,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            Short.MAX_VALUE.toInt()
                        )
                        .addContainerGap()
                )
        )

        teamFinalStateLabel!!.font = Font("Dialog", 1, 30) // NOI18N
        teamFinalStateLabel!!.horizontalAlignment = SwingConstants.CENTER
        teamFinalStateLabel!!.text = "Gewinner"

        val layout = GroupLayout(this)
        this.layout = layout
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(
                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(
                                    jPanel3,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    jPanel1,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addComponent(
                                    teamTowerPanel,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                                .addGroup(
                                    layout.createSequentialGroup()
                                        .addGroup(
                                            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                                .addComponent(
                                                    teamFinalStateLabel,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                                .addComponent(
                                                    teamMothershipPanel,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    GroupLayout.DEFAULT_SIZE,
                                                    Short.MAX_VALUE.toInt()
                                                )
                                        )
                                        .addContainerGap()
                                )
                                .addComponent(
                                    jPanel2,
                                    GroupLayout.DEFAULT_SIZE,
                                    GroupLayout.DEFAULT_SIZE,
                                    Short.MAX_VALUE.toInt()
                                )
                        )
                )
        )
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(
                    layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, 19, GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(
                            teamMothershipPanel,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            teamTowerPanel,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            jPanel1,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(teamFinalStateLabel, GroupLayout.PREFERRED_SIZE, 48, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(
                            jPanel2,
                            GroupLayout.PREFERRED_SIZE,
                            GroupLayout.DEFAULT_SIZE,
                            GroupLayout.PREFERRED_SIZE
                        )
                        .addContainerGap(23, Short.MAX_VALUE.toInt())
                )
        )
    } // </editor-fold>//GEN-END:initComponents

    fun setTeam(team: Team?) {
        if (team != null) {
            team.removePropertyChangeListener(this)
            team.mothership!!.removePropertyChangeListener(this)
        }
        this.team = team
        team!!.addPropertyChangeListener(this)
        team.mothership!!.addPropertyChangeListener(this)
        updateComponents()
        timer.stop()
        teamFinalStateLabel!!.text = ""
        teamFinalStateLabel!!.isEnabled = false
        teamFinalStateLabel!!.text = ""
        saveAgentsPointsLabel!!.text = "-"
        teamPointsLabel!!.text = "-"
        mothershipShieldPointsLabel!!.text = "-"
    }

    fun displayEndCalculation() {
        val t: Thread = object : Thread() {
            override fun run() {
                animateEndCalculation()
            }
        }
        t.priority = Thread.MIN_PRIORITY
        t.start()
    }

    private fun animateEndCalculation() {
        var tmpValue: Int
        try {
            mothershipShieldPointsLabel!!.isEnabled = false
            mothershipShieldPointsNameLabel!!.isEnabled = false
            Thread.sleep(BLINK_ANIMATION.toLong())
            mothershipShieldPointsLabel!!.isEnabled = true
            mothershipShieldPointsNameLabel!!.isEnabled = true
            tmpValue = team!!.mothership!!.shieldPoints
            for (i in 0..tmpValue) {
                mothershipShieldPointsLabel!!.text = i.toString() + "P"
                Thread.sleep(COUNT_ANIMATION.toLong())
            }
            mothershipShieldPointsLabel!!.isEnabled = false
            mothershipShieldPointsNameLabel!!.isEnabled = false
            Thread.sleep(BLINK_ANIMATION.toLong())
            mothershipShieldPointsLabel!!.isEnabled = true
            mothershipShieldPointsNameLabel!!.isEnabled = true
            Thread.sleep(BLINK_ANIMATION.toLong())
            mothershipShieldPointsLabel!!.isEnabled = false
            mothershipShieldPointsNameLabel!!.isEnabled = false
            Thread.sleep(BLINK_ANIMATION.toLong())
            mothershipShieldPointsLabel!!.isEnabled = true
            mothershipShieldPointsNameLabel!!.isEnabled = true
            Thread.sleep(BLINK_ANIMATION.toLong())

            saveAgentsPointsLabel!!.isEnabled = false
            saveAgentsPointsNameLabel!!.isEnabled = false
            Thread.sleep(BLINK_ANIMATION.toLong())
            saveAgentsPointsLabel!!.isEnabled = true
            saveAgentsPointsNameLabel!!.isEnabled = true
            tmpValue = team!!.mothership!!.agentsAtHomePoints
            for (i in 0..tmpValue) {
                saveAgentsPointsLabel!!.text = i.toString() + "P"
                Thread.sleep(COUNT_ANIMATION.toLong())
            }
            saveAgentsPointsLabel!!.isEnabled = false
            saveAgentsPointsNameLabel!!.isEnabled = false
            Thread.sleep(BLINK_ANIMATION.toLong())
            saveAgentsPointsLabel!!.isEnabled = true
            saveAgentsPointsNameLabel!!.isEnabled = true
            Thread.sleep(BLINK_ANIMATION.toLong())
            saveAgentsPointsLabel!!.isEnabled = false
            saveAgentsPointsNameLabel!!.isEnabled = false
            Thread.sleep(BLINK_ANIMATION.toLong())
            saveAgentsPointsLabel!!.isEnabled = true
            saveAgentsPointsNameLabel!!.isEnabled = true
            Thread.sleep(BLINK_ANIMATION.toLong())

            teamPointsLabel!!.isEnabled = false
            teamPointsNameLabel!!.isEnabled = false
            Thread.sleep(BLINK_ANIMATION.toLong())
            teamPointsLabel!!.isEnabled = true
            teamPointsNameLabel!!.isEnabled = true
            tmpValue = team!!.finalPoints
            for (i in 0..tmpValue) {
                teamPointsLabel!!.text = i.toString() + "P"
                Thread.sleep(COUNT_ANIMATION.toLong())
            }
            teamPointsLabel!!.isEnabled = false
            teamPointsNameLabel!!.isEnabled = false
            Thread.sleep(BLINK_ANIMATION.toLong())
            teamPointsLabel!!.isEnabled = true
            teamPointsNameLabel!!.isEnabled = true
            Thread.sleep(BLINK_ANIMATION.toLong())
            teamPointsLabel!!.isEnabled = false
            teamPointsNameLabel!!.isEnabled = false
            Thread.sleep(BLINK_ANIMATION.toLong())
            teamPointsLabel!!.isEnabled = true
            teamPointsNameLabel!!.isEnabled = true
            Thread.sleep(BLINK_ANIMATION.toLong())

            if (gameManager.isWinner(team!!)) {
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.text = "Gewinner"
                teamFinalStateLabel!!.foreground = Color.GREEN
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.isEnabled = true
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.isEnabled = false
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.isEnabled = true
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.isEnabled = false
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.isEnabled = true
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.isEnabled = false
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.isEnabled = true
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.isEnabled = false
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.isEnabled = true
            } else {
                teamFinalStateLabel!!.text = "Verlierer"
                Thread.sleep(BLINK_ANIMATION.toLong())
                teamFinalStateLabel!!.foreground = Color.RED
                teamFinalStateLabel!!.isEnabled = true
            }
        } catch (ex: InterruptedException) {
            Thread.currentThread().interrupt()
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private var jPanel1: JPanel? = null
    private var jPanel2: JPanel? = null
    private var jPanel3: JPanel? = null
    private var jPanel4: JPanel? = null
    private var mothershipFuelProgressBar: JProgressBar? = null
    private var mothershipShieldPointsLabel: JLabel? = null
    private var mothershipShieldPointsNameLabel: JLabel? = null
    private var mothershipShieldProgressBar: JProgressBar? = null
    private var resourcePointsLabel: JLabel? = null
    private var resourcePointsNameLabel: JLabel? = null
    private var saveAgentsPointsLabel: JLabel? = null
    private var saveAgentsPointsNameLabel: JLabel? = null
    private var teamAgentLabel: JLabel? = null
    private var teamAgentLabel2: JLabel? = null
    private var teamColorPanel: JPanel? = null
    private var teamFinalStateLabel: JLabel? = null
    private var teamMemberA: ImageTransformationPanel? = null
    private var teamMemberALabel: JLabel? = null
    private var teamMemberB: ImageTransformationPanel? = null
    private var teamMemberBLabel: JLabel? = null
    private var teamMemberLabel2: JLabel? = null
    private var teamMothershipPanel: JPanel? = null
    private var teamNameLabel: JLabel? = null
    private var teamPointsLabel: JLabel? = null
    private var teamPointsNameLabel: JLabel? = null
    private var teamTowerPanel: JPanel? = null
    private var towerFuelProgressBar: JProgressBar? = null
    private var towerShieldProgressBar: JProgressBar? = null

    // End of variables declaration//GEN-END:variables
    override fun propertyChange(evt: PropertyChangeEvent) {
        if (evt.propertyName == Mothership.MOTHERSHIP_FUEL_STATE_CHANGE) {
            mothershipFuelProgressBar!!.value = (evt.newValue as Int)
            updateMothershipFuelProgressBar()
        } else if (evt.propertyName == Mothership.MOTHERSHIP_SHIELD_STATE_CHANGE) {
            mothershipShieldProgressBar!!.value = (evt.newValue as Int)
            updateMothershipShieldProgressBar()
        } else if (evt.propertyName == Team.POINT_STATE_CHANGE) {
            resourcePointsLabel!!.text = evt.newValue.toString() + "P"
        }
    }

    private fun updateMothershipFuelProgressBar() {
        mothershipFuelProgressBar!!.string =
            "Treibstoff " + (mothershipFuelProgressBar!!.percentComplete * 100).toInt() + "%"
        if (mothershipFuelProgressBar!!.percentComplete < 0.25) {
            timer.start()
        }
        val green: Int
        val red: Int
        if (mothershipFuelProgressBar!!.percentComplete >= 0.5) {
            red = (255 - (255 * (mothershipFuelProgressBar!!.percentComplete - 0.5) * 2)).toInt()
            green = 255
        } else {
            red = 255
            green = (255 * (mothershipFuelProgressBar!!.percentComplete) * 2).toInt()
        }
        mothershipFuelProgressBar!!.foreground = Color(red, green, 0)
    }

    private fun updateMothershipShieldProgressBar() {
        mothershipShieldProgressBar!!.string =
            "Schutzschild " + (mothershipShieldProgressBar!!.percentComplete * 100).toInt() + "%"
        if (mothershipShieldProgressBar!!.percentComplete < Mothership.BURNING_MOTHERSHIP / 100) {
            timer.start()
        }
        val blue: Int
        val red: Int
        if (mothershipShieldProgressBar!!.percentComplete >= 0.5) {
            red = (255 - (255 * (mothershipShieldProgressBar!!.percentComplete - 0.5) * 2)).toInt()
            blue = 255
        } else {
            red = 255
            blue = (255 * (mothershipShieldProgressBar!!.percentComplete) * 2).toInt()
        }
        mothershipShieldProgressBar!!.foreground = Color(red, 0, blue)
    }

    private fun updateTowerFuelProgressBar() {
        towerFuelProgressBar!!.string = "Treibstoff " + (towerFuelProgressBar!!.percentComplete * 100).toInt() + "%"
        if (towerFuelProgressBar!!.percentComplete < 0.25) {
            timer.start()
        }
        val green: Int
        val red: Int
        if (towerFuelProgressBar!!.percentComplete >= 0.5) {
            red = (255 - (255 * (towerFuelProgressBar!!.percentComplete - 0.5) * 2)).toInt()
            green = 255
        } else {
            red = 255
            green = (255 * (towerFuelProgressBar!!.percentComplete) * 2).toInt()
        }
        towerFuelProgressBar!!.foreground = Color(red, green, 0)
    }

    private fun updateTowerShieldProgressBar() {
        towerShieldProgressBar!!.string =
            "Schutzschild " + (towerShieldProgressBar!!.percentComplete * 100).toInt() + "%"
        if (towerShieldProgressBar!!.percentComplete < Mothership.BURNING_TOWER / 100) {
            timer.start()
        }
        val blue: Int
        val red: Int
        if (towerShieldProgressBar!!.percentComplete >= 0.5) {
            red = (255 - (255 * (towerShieldProgressBar!!.percentComplete - 0.5) * 2)).toInt()
            blue = 255
        } else {
            red = 255
            blue = (255 * (towerShieldProgressBar!!.percentComplete) * 2).toInt()
        }
        towerShieldProgressBar!!.foreground = Color(red, 0, blue)
    }

    private var blinkMothership = false
    private var blinkTower = false

    /**
     * Creates new form TeamPanel
     */
    init {
        this.initComponents()
        mothershipFuelProgressBar!!.minimum = 0
        mothershipFuelProgressBar!!.maximum = Mothership.MOTHERSHIP_FUEL_VOLUME
        towerFuelProgressBar!!.minimum = 0
        towerFuelProgressBar!!.maximum = Tower.TOWER_FUEL_VOLUME
        this.timer = Timer(300, this)
    }

    override fun actionPerformed(ex: ActionEvent) {
        if (mothershipShieldProgressBar!!.percentComplete < Mothership.BURNING_MOTHERSHIP / 100) {
            if (blinkMothership) {
                mothershipShieldProgressBar!!.foreground = Color.BLACK
            } else {
                updateMothershipShieldProgressBar()
            }
        }

        if (mothershipFuelProgressBar!!.percentComplete < 0.25) {
            if (blinkMothership) {
                mothershipFuelProgressBar!!.foreground = Color.BLACK
            } else {
                updateMothershipFuelProgressBar()
            }
        }
        blinkMothership = !blinkMothership

        if (towerShieldProgressBar!!.percentComplete < Mothership.BURNING_TOWER / 100) {
            if (blinkTower) {
                towerShieldProgressBar!!.foreground = Color.BLACK
            } else {
                updateTowerShieldProgressBar()
            }
        }

        if (towerFuelProgressBar!!.percentComplete < 0.25) {
            if (blinkTower) {
                towerFuelProgressBar!!.foreground = Color.BLACK
            } else {
                updateTowerFuelProgressBar()
            }
        }
        blinkTower = !blinkTower

        if (mothershipFuelProgressBar!!.percentComplete > 0.25 && mothershipShieldProgressBar!!.percentComplete > Mothership.BURNING_MOTHERSHIP / 100) {
            updateMothershipShieldProgressBar()
            updateMothershipFuelProgressBar()
        }

        if (towerFuelProgressBar!!.percentComplete > 0.25 && towerShieldProgressBar!!.percentComplete > Mothership.BURNING_TOWER / 100) {
            updateTowerShieldProgressBar()
            updateTowerFuelProgressBar()
        }

        if (mothershipFuelProgressBar!!.percentComplete > 0.25 && mothershipShieldProgressBar!!.percentComplete > Mothership.BURNING_MOTHERSHIP / 100 && towerFuelProgressBar!!.percentComplete > 0.25 && towerShieldProgressBar!!.percentComplete > Mothership.BURNING_TOWER / 100) {
            timer.stop()
        }
    }

    companion object {
        const val BLINK_ANIMATION: Int = 100
        const val COUNT_ANIMATION: Int = 5
    }
}
